<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Netty学习-2_第一款Netty应用</title>
    <url>/Netty%E5%AD%A6%E4%B9%A0-2_%E7%AC%AC%E4%B8%80%E6%AC%BENetty%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><strong>1、配置开发环境</strong>  </p>
<p>​        eclipse、Maven</p>
<p><strong>2、编写Echo服务器</strong>  </p>
<a id="more"></a>

<p>​        下图展示了Echo客户端和服务器：</p>
<p><img src="../images%5Cnetty%E5%AD%A6%E4%B9%A0%5C2-1.png" alt=""></p>
<p>​        Echo客户端和服务端之前的交互是非常简单的；在客户端建立一个连接之后，它会向服务器发送一个或多个消息，反过来，服务器又会将每个消息回送给客户端。虽然它本身看起来好像用处不大，但它充分体现了客户端/服务器系统中典型的请求-<strong>响应交互模式</strong>。</p>
<p><strong>下面来编写Echo服务器：</strong>   </p>
<p>​        所有的Netty服务器都需要以下两部分。至少一个ChannelHandler——该组件实现了服务器对从客户端接收的数据的处理，即它的业务逻辑。引导——这是配置服务器的启动代码。至少，它会将服务器绑定到它要监听连接请求的端口上。</p>
<p><strong>2.1 ChannelHandler和业务逻辑</strong>  </p>
<p>​        上面我们介绍了Future和回调，并且阐述了他们在时间驱动设计中的应用。我们还讨论了ChannelHandler，它是一个接口族的父接口，他的实现负责接收并响应时间通知。在Netty应用程序中，所有的数据处理逻辑都包含在这些核心抽象的实现中。  </p>
<p>​        因为你的Echo服务器会响应传入的消息，所以它需要实现CHannelInboundHandler接口，用来定义响应入站事件的方法。这个简单的应用程序只需要用到少量的这些方法，所以集成ChannelInboundHandlerAdapter类也就足够了，他提供了ChannelInboundHandler的默认实现。  </p>
<p>​        我们感兴趣的方法是：</p>
<ul>
<li>channelRead() —— 对于每个传入的消息都要调用；</li>
<li>channelReadComplete() —— 通知ChannelInboundHandler最后一次对channelRead()的调用是当前批量读取中的最后一条消息；</li>
<li>exceptionCaught()——在读取操作期间，有异常抛出时会调用。  </li>
</ul>
<p>​        该Echo服务器的ChannelHandler实现是EchoServerHandler，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标示一个ChannelHandler可以被多个Channel安全的共享</span></span><br><span class="line"><span class="meta">@Sharable</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerHandler</span> <span class="keyword">extends</span>  <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于每个传入的消息都要调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext  ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf in = (ByteBuf) msg;</span><br><span class="line">        <span class="comment">// 将消息记录到控制台 </span></span><br><span class="line">        System.out.println(<span class="string">"Server received："</span> +  in.toString(CharsetUtil.UTF_8)); </span><br><span class="line">        <span class="comment">// 将接收到的消息写给发送者，而不冲刷出站消息</span></span><br><span class="line">        ctx.write(in); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通知ChannelInboundHandler最后一次对channelRead()的调用是当前批量读取中的最后一条消息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span>  <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	   <span class="comment">// 将未决消息冲刷到远程节点，并且关闭改Channel</span></span><br><span class="line">       ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在读取操作期间，有异常抛出时会调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable  cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         <span class="comment">// 打印异常</span></span><br><span class="line">         cause.printStackTrace(); </span><br><span class="line">         <span class="comment">// 关闭该Channel</span></span><br><span class="line">         ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        ChannelInboundHandlerAdapter有一个直观的API，并且它的每个方法够可以被重写以挂钩到事件生命周期的恰当节点上。因为需要处理所有接收到的数据，所以重写了channelRead()方法。在这个服务器应用程序中，将数据简单地回送给了远程节点。  </p>
<p>​        重写exceptionCaught()方法允许对Throwable的任何子类型做出反应，这里只是记录了异常并关闭了连接。更完善的程序会尝试从异常中恢复。 </p>
<p>​        除ChannelInboundHandlerAdapter外，还有许多需要学习的ChannelHandler的子类型和实现，后面会详细说。目前，记住下面关键点：</p>
<ul>
<li>针对不同类型的事件来调用ChannelHandler；</li>
<li>应用程序通过实现或者扩展ChannelHandler来挂钩到事件的生命周期，并且提供自定义的应用程序逻辑；</li>
<li>在架构上，ChannelHandler有助于保持业务逻辑与网络处理代码的分离，这简化了开发过程，因为代码必须不断的演化以响应不断变化的需求。</li>
</ul>
<p><strong>2.2 引导服务器</strong></p>
<p>​        在讨论过由EchoServerHandler实现的核心业务逻辑后，我们现在可以探讨引导服务器本身的过程了，具体内容如下：</p>
<ul>
<li><p>绑定到服务器将在其上监听并接受传入连接请求的端口；</p>
</li>
<li><p>配置Channel，以将有关的入站消息通知给EchoServerHandler实例。</p>
<p>下面展示了EchoServer类的完整代码。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EchoServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.port = port;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> EchoServer(<span class="number">8880</span>).start(); <span class="comment">// 调用服务器的start()方法</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> EchoServerHandler serverHandler = <span class="keyword">new</span> EchoServerHandler();</span><br><span class="line">		EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//创建EventLoopGroup</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap(); <span class="comment">//创建ServerBootstarp</span></span><br><span class="line">			b.group(group)</span><br><span class="line">			.channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>) //指定所使用的<span class="title">NIO</span>传输<span class="title">Channel</span></span></span><br><span class="line"><span class="class">			.<span class="title">localAddress</span>(<span class="title">new</span> <span class="title">InetSocketAddress</span>(<span class="title">port</span>)) // 使用指定的端口设置套接字地址</span></span><br><span class="line"><span class="class">			.<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123; <span class="comment">// 添加一个EchoServerHandler到子Channel的ChannelPipeline</span></span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">					ch.pipeline().addLast(serverHandler);<span class="comment">// EchoServerHandler被标注为@Shareable，所以我们可以总是使用同样的实例</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">			ChannelFuture f = b.bind().sync(); <span class="comment">// 异步的绑定服务器；调用sync()方法阻塞等待直到绑定完成</span></span><br><span class="line">			f.channel().closeFuture().sync(); <span class="comment">// 获取Channel的CloseFuture，并且阻塞当前线程直到它完成</span></span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			group.shutdownGracefully().sync(); <span class="comment">// 关闭EventLoopGroup，释放所有资源</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        回顾一下，下面是这些是服务器的主要代码组件：</p>
<ul>
<li>EchoServerHandler实现了业务逻辑；</li>
<li>main()方法引导了服务器；</li>
</ul>
<p>​        引导过程中所需要的步骤如下：</p>
<ul>
<li>创建一个ServerBootstrap的实例以引导和绑定服务器；</li>
<li>创建分配一个NioEventLoopGroup实例以进行事件的处理，如接受新连接以及读/写数据；</li>
<li>指定服务器绑定的本地的InetSocketAddress;</li>
<li>使用一个EchoServerHandler的实例初始化每一个新的Channel；</li>
<li>调用ServerBootstrap.bind()方法以绑定服务器。</li>
</ul>
<p><strong>3、编写Echo客户端</strong></p>
<p>​        Echo客户端的功能如下：</p>
<ul>
<li>连接到服务器</li>
<li>发送一个或者多个消息</li>
<li>对于每个消息，等待并接收从服务器发回的相同的消息</li>
<li>关闭连接</li>
</ul>
<p><strong>3.1 通过ChannelHandler实现客户端逻辑</strong></p>
<p>​        客户端和服务器一样有一个用来处理数据的ChannelHandler。这里扩展SimpleChannelInboundHandler类来处理任务，重写如下方法：</p>
<ul>
<li>channelActive() —— 在到服务器的连接已经建立之后被调用；</li>
<li>chennelRead0() —— 当从服务器接收到一条消息时被调用</li>
<li>exceptionCaught() —— 在处理过程中引发异常时被调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例可被多个Channel共享</span></span><br><span class="line"><span class="meta">@Sharable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 当被通知Channel是活跃的时候，发送一条消息</span></span><br><span class="line">		ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">"Netty rocks!"</span>, CharsetUtil.UTF_8));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 记录接收的消息</span></span><br><span class="line">		System.out.println(<span class="string">"Client received:"</span> + msg.toString(CharsetUtil.UTF_8));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 发生异常时记录错误并关闭Channel</span></span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SimpleChannelInboundHandler和ChannelInboundHandler区别</p>
<p>​        客户端使用SimpleChannelInboundHandler而服务端使用的是ChannelInboundHandlerAdapter，这和两个因素的相互作用有关：业务逻辑如何处理消息以及Netty如何管理资源。</p>
<p>​        客户端，当channelRead0方法完成时，已经有了传入消息，并且已经处理完成。</p>
<p>​        服务端，需要将消息返回给发送者，channelRead方法返回后可能仍然没有完成，消息在EchoServerHandler的channelReadComplete()方法中，当writeAndFlush()方法被调用时被释放。</p>
</blockquote>
<p><strong>3.2 引导客户端</strong></p>
<p>​        引导客户端类似引导服务器，不同的是需要绑定服务器的地址和端口，而不是绑定一个被监听的端口。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EchoClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.host = host;</span><br><span class="line">		<span class="keyword">this</span>.port = port;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 创建 Bootstrap</span></span><br><span class="line">			Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">			b.group(group)</span><br><span class="line">			<span class="comment">// NIO传输</span></span><br><span class="line">			.channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">			// 设置服务器的<span class="title">InetSocketAddress</span></span></span><br><span class="line"><span class="class">			.<span class="title">remoteAddress</span>(<span class="title">new</span> <span class="title">InetSocketAddress</span>(<span class="title">host</span>, <span class="title">port</span>))</span></span><br><span class="line"><span class="class">			// 在创建<span class="title">Channel</span>时向<span class="title">ChannelPipeline</span>中添加一个<span class="title">EchoClientHandler</span>实例</span></span><br><span class="line"><span class="class">			.<span class="title">handler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">					ch.pipeline().addLast(<span class="keyword">new</span> EchoClientHandler());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">			<span class="comment">// 连接到远程节点，阻塞等待直到连接完成</span></span><br><span class="line">			ChannelFuture f = b.connect().sync();</span><br><span class="line">			<span class="comment">// 获取Channel的CloseFuture，并且阻塞当前线程直到它完成</span></span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// 关闭EventLoopGroup，释放所有资源</span></span><br><span class="line">			group.shutdownGracefully().sync();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> EchoClient(<span class="string">"localhost"</span>, <span class="number">8880</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回顾一下要点：</p>
<ul>
<li>为初始化客户端，创建了一个Bootstrap实例；</li>
<li>为进行实践处理分配了一个NioEventLoopGroup实例，其中事件处理包括创建新的连接以及处理入站和出站数据；</li>
<li>为服务器连接创建了一个InetSocketAddress实例；</li>
<li>当连接被建立时，一个EchoClientHandler实例会被安装到ChannelPipeline中；</li>
<li>在一切设置完成后，调用Bootstrap.connect()方法连接到远程节点。</li>
</ul>
<p><strong>3.3 运行服务端和客户端</strong></p>
<p><img src="../images%5Cnetty%E5%AD%A6%E4%B9%A0%5C2-2.png" alt=""></p>
<p><img src="../images%5Cnetty%E5%AD%A6%E4%B9%A0%5C2-3.png" alt=""></p>
<blockquote>
<p>一旦客户端建立连接，它就发送它的消息 —— Netty rocks!</p>
<p>服务器报告接收到的消息   ，并将其返回给客户端</p>
<p>客户端报告返回的消息并退出</p>
</blockquote>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty学习-1_Netty核心组件</title>
    <url>/Netty%E5%AD%A6%E4%B9%A0-1_Netty%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p><strong>netty核心组件</strong></p>
<ul>
<li><p>Channel；</p>
</li>
<li><p>回调；</p>
</li>
<li><p>Future；</p>
</li>
<li><p>事件和ChannelHandler；</p>
<a id="more"></a>

</li>
</ul>
<p><strong>1、Channel</strong> </p>
<p>​        Channel是Java NIO的一个基本构造。</p>
<p>​        它代表一个到实体（如一个硬件设备、一个文件、一个网络套接字或者一个能够执行一个或者多个不同的I/O操作的程序组件）的开放连接，如读操作和写操作。   目前，可以把Channel看作是传入（入站）或者传出（出站）数据的载体。因此，他可以被打开或者被关闭，连接或者断开连接。<br><strong>2、回调</strong>   </p>
<p>​        一个回调其实就是一个方法，一个指向已经被提供给另外一个方法的方法的引用。这使得后者可以在适当的时候调用前者。回调在广泛的编程场景中都有应用，而且也是在操作完成后通知相关方最常见的方式之一。  </p>
<p>​        Netty在内部使用了回调来处理事件；当一个回调被触发时，相关的事件可以被一个interface-ChannelHandler的实现处理。下面代码展示了一个例子：当一个新的；连接已经被建立时，ChannelHandler的channelActive()回调方法将会被调用，并打印出一条信息。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInbounnnndHandlerAdapter</span></span>&#123;     </span><br><span class="line">    <span class="comment">// 当一个新的连接已经被建立时，channelActive(ChannelHandlerXContext)将会被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"Client "</span> + ctx.channel().remoteAddress() + <span class="string">" connected"</span>);     </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、Future</strong>  </p>
<p>​        Future提供了另一种在操作完成时通知应用程序的方式。这个对象可以看作是一个异步操作的结果的占位符；它将在未来的某个时刻完成，并对其结果的访问。  </p>
<p>​        JDK预置了interface Future，但是其所提供的实现，只允许手动检查对应的操作是否已经完成，或者一直阻塞直到它完成。这是非常繁琐的，所以Netty提供了它自己的实现——ChannelFuture，用于在执行异步操作的时候使用。  </p>
<p>​        Channel提供了几种额外的方法，这些方法使得我们能够注册一个或者多个ChannelFutureListener实例。监听器的回调方法operactionComplete()，将会在对应的操作完成时被调用。然后监听器可以判断该操作是成功的完成了还是出错了。如果是后者，我们可以检索产生的Throwable。简而言之，由ChannelFutureListener提供的通知机制消除了手动检查对应的操作是否完成的必要。  </p>
<p>​        每个Netty的出站I/O操作都将返回一个ChannelFuture；也就是说，它们都不会阻塞。正如我们前面所提到过的一样，Netty完全是异步和事件驱动的。  </p>
<p>​        下面代码展示了ChannelFuture作为一个I/O操作的一部分返回的例子。这里，connect()方法将会直接返回，而不会阻塞，该调用将会在后台完成。这究竟什么时候会发生则取决于若干的因素，但这个关注点已经从代码中抽象出来了。因为线程不用阻塞以等待对应的操作完成，所以它可以同时做其他工作，从而更加有效地利用资源。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = ...;  </span><br><span class="line">ChannelFuture future = channel.connect(<span class="keyword">new</span> InteSocketAddress(<span class="string">"192.168.1.1"</span>, <span class="number">25</span>));</span><br></pre></td></tr></table></figure>

<p>​        下面代码展示了如何利用ChannelFutureListener。首先，要连接到远程节点上。然后，要注册一个新的ChannelFutureListener到对connect()方法的调用所返回的ChannelFuture上。当该监听器被通知连接已经建的的时候，要检查对应的状态。如果该操作是成功的，那么将数据写到该Channel。否则，要从ChannelFuture中检索对应的Throwable。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = ...;  </span><br><span class="line">ChannelFuture futture = channel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"191.168.1.1"</span>, <span class="number">25</span>)); <span class="comment">//异步的连接到远程节点  </span></span><br><span class="line">futuer.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123; <span class="comment">//注册一个ChannelFutureListener以便在操作完成时获得通知     </span></span><br><span class="line">    <span class="meta">@Override</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span></span>&#123;    </span><br><span class="line">        <span class="comment">//如果操作是成功的，则创建一个ByteBuf以持有数据  </span></span><br><span class="line">        <span class="keyword">if</span>(future.isSuccess())&#123;        </span><br><span class="line">            ByteBuf buffer = Unpooled.copiedBuffer(<span class="string">"Hello"</span>,Charset.defaultCharset());     </span><br><span class="line">            <span class="comment">// 数据将异步的发送到远程节点。返回一个ChannelFuture</span></span><br><span class="line">            Channelfuture wf = future.channel().writeAndFlush(buffer);          </span><br><span class="line">            ...       </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;        </span><br><span class="line">            <span class="comment">// 如果发生错误，则访问描述原因的Throwable cause.printStackTrace();       </span></span><br><span class="line">            Throwable cause = future.cause(); </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>4、事件和ChannelHandler</strong>  </p>
<p>​    Netty使用不同的事件来通知我们状态的改变或者是操作的状态。这使得我们能够基于已经发生的时间来触发适当的动作。这些动作可能是：</p>
<ul>
<li>记录日志；</li>
<li>数据转换；</li>
<li>流控制；</li>
<li>应用程序逻辑。   </li>
</ul>
<p>​        Netty是一个网络编程框架，所以事件是按照它们与入站或出站数据流的相关性进行分类的。可能由入站数据或者相关的状态更改而触发的事件包括：</p>
<ul>
<li>连接已被激活或者连接失活；</li>
<li>数据读取；</li>
<li>用户事件；</li>
<li>错误事件。 </li>
</ul>
<p>​        出站事件是未来将会触发的某个动作的操作结果，这些动作包括：</p>
<ul>
<li>打开或者关闭到远程节点的连接；</li>
<li>将数据写到或者冲刷到套接字。  </li>
</ul>
<p>​        每个事件都可以被分发给ChannelHandler类中的某个用户实现的方法。这是一个很好的将事件驱动范式直接转换为应用程序构建块的例子。下面展示了一个事件是如何被一个这样的ChannelHandler链处理的。</p>
<p>  &lt;——出站事件——出站处理器&lt;——出站事件——出站处理器——出站事件   </p>
<p> 入站事件 ——&gt;入站处理器 —— 入站事件 ——&gt;入站处理器 —— 入站事件 ——&gt;  </p>
<p>​        Netty的ChannelHandler为处理器提供了基本的抽象，如上所示的哪些，目前可以认为每个ChannelHandler的实例都类似一种为了响应特定事件而被执行的回调。  </p>
<p>​        Netty提供了大量的预定义的可以开箱即用的ChannelHandler实现，包括用于各种协议的ChannelHandler。在内部，ChannelHandler自己也使用了事件和Future，使得它们也成了你的应用程序将使用的相同抽象的消费者。</p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>重学Java基础知识-对象</title>
    <url>/%E9%87%8D%E5%AD%A6Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java基础知识</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java基础</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装MySQL5.7</title>
    <url>/CentOS%E5%AE%89%E8%A3%85MySQL5-7/</url>
    <content><![CDATA[<ul>
<li><p>准备安装包</p>
<blockquote>
<p>mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar</p>
<p>perl-JSON-2.90-1.of.el7.noarch.rpm</p>
<p>perl-Data-Dumper-2.145-3.el7.x86_64.rpm</p>
</blockquote>
<a id="more"></a>
</li>
<li><p>解压MySQL安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar -xvf mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>mysql-community-client-5.7.28-1.el7.x86_64.rpm<br>mysql-community-common-5.7.28-1.el7.x86_64.rpm<br>mysql-community-devel-5.7.28-1.el7.x86_64.rpm<br>mysql-community-embedded-5.7.28-1.el7.x86_64.rpm<br>mysql-community-embedded-compat-5.7.28-1.el7.x86_64.rpm<br>mysql-community-embedded-devel-5.7.28-1.el7.x86_64.rpm<br>mysql-community-libs-5.7.28-1.el7.x86_64.rpm<br>mysql-community-libs-compat-5.7.28-1.el7.x86_64.rpm<br>mysql-community-server-5.7.28-1.el7.x86_64.rpm<br>mysql-community-test-5.7.28-1.el7.x86_64.rpm</p>
</blockquote>
</li>
<li><p>安装mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh mysql-community-*.rpm</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>报错了</p>
<blockquote>
<p>错误：依赖检测失败：</p>
<pre><code>mariadb-libs 被 mysql-community-libs-5.7.28-1.el7.x86_64 取代
mariadb-libs 被 mysql-community-libs-compat-5.7.28-1.el7.x86_64 取代
perl(JSON) 被 mysql-community-test-5.7.28-1.el7.x86_64 需要</code></pre></blockquote>
</li>
<li><p>卸载mariadb，安装perl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -e mariadb-libs --nodeps</span></span><br><span class="line"><span class="comment"># rpm -ivh perl-Data-Dumper-2.145-3.el7.x86_64.rpm </span></span><br><span class="line"><span class="comment"># rpm -ivh perl-Test-Simple-1.302164-1.el7.noarch.rpm </span></span><br><span class="line"><span class="comment"># rpm -ivh perl-JSON-2.90-1.of.el7.noarch.rpm</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>继续安装MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh mysql-community-*.rpm</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>准备中…                          ################################# [100%]<br>正在升级/安装…<br>   1:mysql-community-common-5.7.28-1.e################################# [ 10%]<br>   2:mysql-community-libs-5.7.28-1.el7################################# [ 20%]<br>   3:mysql-community-client-5.7.28-1.e################################# [ 30%]<br>   4:mysql-community-server-5.7.28-1.e################################# [ 40%]<br>   5:mysql-community-devel-5.7.28-1.el################################# [ 50%]<br>   6:mysql-community-embedded-5.7.28-1################################# [ 60%]<br>   7:mysql-community-embedded-devel-5.################################# [ 70%]<br>   8:mysql-community-test-5.7.28-1.el7################################# [ 80%]<br>   9:mysql-community-libs-compat-5.7.2################################# [ 90%]<br>  10:mysql-community-embedded-compat-5################################# [100%]</p>
</blockquote>
</li>
<li><p>创建mysql数据文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /data</span></span><br><span class="line"><span class="comment"># mkdir mysql</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>授予mysql用户和组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chown -R mysql:mysql mysql</span></span><br><span class="line"><span class="comment"># chmod 755 mysql</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>更改mysql配置文件，添加或修改如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/my.cnf</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>#数据目录 为新创建的目录</p>
<p>datadir=/data/mysql</p>
<p>#不区分大小写、 utf8编码和其他设置</p>
<p>character_set_server=utf8<br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION<br>lower_case_table_names = 1<br>skip-name-resolve<br>wait_timeout=31536000<br>interactive_timeout=31536000</p>
</blockquote>
</li>
<li><p>启动mysql服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start mysqld.service</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看mysql密码为：x0zqJrQih#yq</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep 'temporary password' /var/log/mysqld.log</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2019-12-13T09:13:16.939321Z 1 [Note] A temporary password is generated for root@localhost: x0zqJrQih#yq</p>
</blockquote>
</li>
<li><p>登陆mysql并修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql -uroot -p</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改密码,并查看mysql编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER USER() IDENTIFIED BY &apos;你的密码&apos;;</span><br><span class="line">mysql&gt; use mysql</span><br><span class="line">mysql&gt; show variables &apos;%char%&apos;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>+————————————–+—————————-+<br>| Variable_name                        | Value                      |<br>+————————————–+—————————-+<br>| character_set_client                 | utf8                       |<br>| character_set_connection             | utf8                       |<br>| character_set_database               | utf8                       |<br>| character_set_filesystem             | binary                     |<br>| character_set_results                | utf8                       |<br>| character_set_server                 | utf8                       |<br>| character_set_system                 | utf8                       |<br>| character_sets_dir                   | /usr/share/mysql/charsets/ |<br>| validate_password_special_char_count | 1                          |<br>+————————————–+—————————-+</p>
</blockquote>
</li>
<li><p>设置root用户可远程访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;你的密码&apos; WITH GRANT OPTION;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>
</li>
<li><p>开放mysql端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># firewall-cmd --add-port=3306/tcp --zone=public --permanent</span></span><br><span class="line"><span class="comment"># firewall-cmd --reload </span></span><br><span class="line"><span class="comment"># firewall-cmd --list-ports</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>3306/tcp</p>
</blockquote>
</li>
<li><p>安装完成！！！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>数据库安装</tag>
        <tag>MySql</tag>
        <tag>CentOS安装MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>linux中设置别名</title>
    <url>/linux%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%88%AB%E5%90%8D/</url>
    <content><![CDATA[<ul>
<li><p>临时设置（重启后失效）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># alias ll="ls -l"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>固定设置（永久生效）</p>
<p><em>编辑配置文件，并添加内容</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/bashrc</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>alias ll=”ls -l”</p>
</blockquote>
<p><em>使配置文件生效</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source /etc/bashrc</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>别名</tag>
        <tag>alias</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7共享目录-NFS共享目录</title>
    <url>/CentOS7%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95-NFS%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li><p>安装nfs和rpcbind</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install nft-utils</span></span><br><span class="line"><span class="comment"># yum install rpcbind</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动nfs和rpcbind</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start nfs</span></span><br><span class="line"><span class="comment"># systemctl start rpcbind</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>开放端口并重启防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># firewall-cmd --zone=public --add-port=111/tcp --permanent</span></span><br><span class="line"><span class="comment"># firewall-cmd --zone=public --add-port=2049/tcp --permanent</span></span><br><span class="line"><span class="comment"># firewall-cmd --reload</span></span><br><span class="line"><span class="comment"># firewall-cmd --list-ports</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建需要共享的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /opt/nfs</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑/etc/exports 文件，添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/exports</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>/opt/nfs 10.0.0.2(rw,no_root_squash,sync,no_wdelay)<br>/opt/nfs 10.0.0.3(rw,no_root_squash,sync,no_wdelay)</p>
</blockquote>
</li>
<li><p>使exports文件生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo exportfs -rv</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启nfs和rpcbind</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl restart nfs</span></span><br><span class="line"><span class="comment"># systemctl restart rpcbind</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="客户端-（10-0-0-2和10-0-0-3）"><a href="#客户端-（10-0-0-2和10-0-0-3）" class="headerlink" title="客户端 （10.0.0.2和10.0.0.3）"></a>客户端 （10.0.0.2和10.0.0.3）</h4><ul>
<li><p>创建需要挂载的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /opt/nfs</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>挂载网络磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mount -t nfs 10.0.0.1:/opt/nfs /opt/nfs</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看挂载的网络磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># df -h</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>CentOS共享目录</tag>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库中char和varchar的区别</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%ADchar%E5%92%8Cvarchar%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li><p>char的长度是不可变的，而varchar的长度是可变的。</p>
</li>
<li><p>定义一个char[10]和varchar[10],如果存进去的是‘abcd’,那么char所占的长度依然为10，除了字符‘abcd’外，后面跟六个空格，而varchar就立马把长度变为4了，取数据的时候，char类型的要用trim()去掉多余的空格，而varchar是不需要的。</p>
<a id="more"></a>
</li>
<li><p>char的存取数度还是要比varchar要快得多，因为其长度固定，方便程序的存储与查找；但是char也为此付出的是空间的代价，因为其长度固定，所以难免会有多余的空格占位符占据空间，可谓是以空间换取时间效率，而varchar是以空间效率为首位的。</p>
</li>
<li><p>char的存储方式是，对英文字符（ASCII）占用1个字节，对一个汉字占用两个字节；而varchar的存储方式是，对每个英文字符占用2个字节，汉字也占用2个字节，两者的存储数据都非unicode的字符数据。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下安装emqx</title>
    <url>/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85emqx/</url>
    <content><![CDATA[<h3 id="Install-the-required-dependencies"><a href="#Install-the-required-dependencies" class="headerlink" title="Install the required dependencies"></a>Install the required dependencies</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
<h3 id="Set-up-a-stable-repository-taking-the-CentOS7-as-an-example"><a href="#Set-up-a-stable-repository-taking-the-CentOS7-as-an-example" class="headerlink" title="Set up a stable repository, taking the CentOS7 as an example."></a>Set up a stable repository, taking the CentOS7 as an example.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager --add-repo https://repos.emqx.io/emqx-ce/redhat/centos/7/emqx-ce.repo</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Install-the-latest-version-of-EMQ-X"><a href="#Install-the-latest-version-of-EMQ-X" class="headerlink" title="Install the latest version of EMQ X"></a>Install the latest version of EMQ X</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install emqx</span><br></pre></td></tr></table></figure>
<h3 id="Install-a-specific-version-of-EMQ-X"><a href="#Install-a-specific-version-of-EMQ-X" class="headerlink" title="Install a specific version of EMQ X"></a>Install a specific version of EMQ X</h3><h4 id="Query-available-version"><a href="#Query-available-version" class="headerlink" title="Query available version"></a>Query available version</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum list emqx --showduplicates | sort -remqx.x86_64 3.1.0-1.el7 emqx-stableemqx.x86_64 3.0.1-1.el7 emqx-stableemqx.x86_64 3.0.0-1.el7 emqx-stable</span><br></pre></td></tr></table></figure>
<h4 id="Install-a-specific-version-based-on-the-version-string-in-the-second-column-such-as-3-1-0"><a href="#Install-a-specific-version-based-on-the-version-string-in-the-second-column-such-as-3-1-0" class="headerlink" title="Install a specific version based on the version string in the second column, such as 3.1.0"></a>Install a specific version based on the version string in the second column, such as 3.1.0</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo yum install emqx-3.1.0</span><br></pre></td></tr></table></figure>
<h3 id="Start-EMQ-X"><a href="#Start-EMQ-X" class="headerlink" title="Start EMQ X"></a>Start EMQ X</h3><h4 id="Directly-start"><a href="#Directly-start" class="headerlink" title="Directly start"></a>Directly start</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ emqx start</span><br></pre></td></tr></table></figure>
<p><em>emqx 3.1.0 is started successfully!</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ emqx_ctl status</span><br></pre></td></tr></table></figure>
<p><em>Node ‘emqx@127.0.0.1’ is startedemqx v3.1.0 is running</em></p>
<h4 id="systemctl-start"><a href="#systemctl-start" class="headerlink" title="systemctl start"></a>systemctl start</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start emqx</span><br></pre></td></tr></table></figure>
<h4 id="service-start"><a href="#service-start" class="headerlink" title="service start"></a>service start</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo service emqx start</span><br></pre></td></tr></table></figure>
<h3 id="访问应用"><a href="#访问应用" class="headerlink" title="访问应用"></a>访问应用</h3><p>地址：<a href="http://IP:18083" target="_blank" rel="noopener">http://IP:18083</a><br>用户名/密码：admin/public</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mqtt</tag>
        <tag>物联网</tag>
        <tag>通讯</tag>
      </tags>
  </entry>
  <entry>
    <title>漫威宇宙四个阶段观影顺序</title>
    <url>/%E6%BC%AB%E5%A8%81%E5%AE%87%E5%AE%99%E5%9B%9B%E4%B8%AA%E9%98%B6%E6%AE%B5%E8%A7%82%E5%BD%B1%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h4 id="钢铁侠（2008年5月2日）"><a href="#钢铁侠（2008年5月2日）" class="headerlink" title="钢铁侠（2008年5月2日）"></a>钢铁侠（2008年5月2日）</h4><h4 id="无敌浩克（2008年6月12日）"><a href="#无敌浩克（2008年6月12日）" class="headerlink" title="无敌浩克（2008年6月12日）"></a>无敌浩克（2008年6月12日）</h4><h4 id="钢铁侠2（2010年5月7日）"><a href="#钢铁侠2（2010年5月7日）" class="headerlink" title="钢铁侠2（2010年5月7日）"></a>钢铁侠2（2010年5月7日）</h4><a id="more"></a>
<h4 id="雷神（2011年5月6日）"><a href="#雷神（2011年5月6日）" class="headerlink" title="雷神（2011年5月6日）"></a>雷神（2011年5月6日）</h4><h4 id="美国队长（2011年7月22日）"><a href="#美国队长（2011年7月22日）" class="headerlink" title="美国队长（2011年7月22日）"></a>美国队长（2011年7月22日）</h4><h4 id="复仇者联盟（2012年5月5日）"><a href="#复仇者联盟（2012年5月5日）" class="headerlink" title="复仇者联盟（2012年5月5日）"></a>复仇者联盟（2012年5月5日）</h4><h4 id="钢铁侠3（2013年5月1日）"><a href="#钢铁侠3（2013年5月1日）" class="headerlink" title="钢铁侠3（2013年5月1日）"></a>钢铁侠3（2013年5月1日）</h4><h4 id="雷神2：黑暗世界（2013年10月30日）"><a href="#雷神2：黑暗世界（2013年10月30日）" class="headerlink" title="雷神2：黑暗世界（2013年10月30日）"></a>雷神2：黑暗世界（2013年10月30日）</h4><h4 id="美国队长2：冬日战士（2014年4月4日）"><a href="#美国队长2：冬日战士（2014年4月4日）" class="headerlink" title="美国队长2：冬日战士（2014年4月4日）"></a>美国队长2：冬日战士（2014年4月4日）</h4><h4 id="银河护卫队（2014年8月1日）"><a href="#银河护卫队（2014年8月1日）" class="headerlink" title="银河护卫队（2014年8月1日）"></a>银河护卫队（2014年8月1日）</h4><h4 id="复仇者联盟2：奥创纪元（2015年5月1日）"><a href="#复仇者联盟2：奥创纪元（2015年5月1日）" class="headerlink" title="复仇者联盟2：奥创纪元（2015年5月1日）"></a>复仇者联盟2：奥创纪元（2015年5月1日）</h4><h4 id="蚁人（2015年7月17日）"><a href="#蚁人（2015年7月17日）" class="headerlink" title="蚁人（2015年7月17日）"></a>蚁人（2015年7月17日）</h4><h4 id="美国队长3：内战（2016年5月6日）"><a href="#美国队长3：内战（2016年5月6日）" class="headerlink" title="美国队长3：内战（2016年5月6日）"></a>美国队长3：内战（2016年5月6日）</h4><h4 id="奇异博士（2016年11月4日）"><a href="#奇异博士（2016年11月4日）" class="headerlink" title="奇异博士（2016年11月4日）"></a>奇异博士（2016年11月4日）</h4><h4 id="银河护卫队2（2017年5月5日）"><a href="#银河护卫队2（2017年5月5日）" class="headerlink" title="银河护卫队2（2017年5月5日）"></a>银河护卫队2（2017年5月5日）</h4><h4 id="蜘蛛侠：英雄归来（2017年7月7日）"><a href="#蜘蛛侠：英雄归来（2017年7月7日）" class="headerlink" title="蜘蛛侠：英雄归来（2017年7月7日）"></a>蜘蛛侠：英雄归来（2017年7月7日）</h4><h4 id="雷神3（2017年11月3日）"><a href="#雷神3（2017年11月3日）" class="headerlink" title="雷神3（2017年11月3日）"></a>雷神3（2017年11月3日）</h4><h4 id="黑豹（2018年2月16日）"><a href="#黑豹（2018年2月16日）" class="headerlink" title="黑豹（2018年2月16日）"></a>黑豹（2018年2月16日）</h4><h4 id="复仇者联盟3：无限战争（2018年4月27日）"><a href="#复仇者联盟3：无限战争（2018年4月27日）" class="headerlink" title="复仇者联盟3：无限战争（2018年4月27日）"></a>复仇者联盟3：无限战争（2018年4月27日）</h4><h4 id="蚁人2：黄蜂女现身（2018年7月6日）"><a href="#蚁人2：黄蜂女现身（2018年7月6日）" class="headerlink" title="蚁人2：黄蜂女现身（2018年7月6日）"></a>蚁人2：黄蜂女现身（2018年7月6日）</h4><h4 id="惊奇队长（2019年3月8日）"><a href="#惊奇队长（2019年3月8日）" class="headerlink" title="惊奇队长（2019年3月8日）"></a>惊奇队长（2019年3月8日）</h4><h4 id="复仇者联盟4（2019年5月3日）"><a href="#复仇者联盟4（2019年5月3日）" class="headerlink" title="复仇者联盟4（2019年5月3日）"></a>复仇者联盟4（2019年5月3日）</h4><h4 id="蜘蛛侠：英雄远征（2019年7月5日）"><a href="#蜘蛛侠：英雄远征（2019年7月5日）" class="headerlink" title="蜘蛛侠：英雄远征（2019年7月5日）"></a>蜘蛛侠：英雄远征（2019年7月5日）</h4>]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>电影</tag>
        <tag>漫威</tag>
        <tag>观影顺序</tag>
        <tag>钢铁侠</tag>
      </tags>
  </entry>
</search>
